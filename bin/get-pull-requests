#!/bin/bash

echo "This will fetch all pull requests from the current repository and label them with the given label string."
read -rsp $'Press any key to continue...\n' -n1 key

if [ $# -ne 2 ]; then
  echo "Usage: $0 <pull_request_number> <label_string>"
  exit 1
fi

# Take pull request number as an argument
PULL_REQUEST_NUMBER="$1"
LABEL_STRING="$2"

COMMIT_URL=$(gh repo view --json url --jq '.url')/commit/
PULL_URL=$(gh repo view --json url --jq '.url')/pull/

# Fetch the pull request for the current repository
gh pr view "$PULL_REQUEST_NUMBER" --json commits --jq '{commits}' > pull_request.json

# Parse commit messages for the pull request number
PULL_REQUEST_REGEX="#([0-9]+)\)"
jq -r '.commits[].messageHeadline' pull_request.json | while read COMMIT_MESSAGE; do
  # Find the relevant pull request number in the commit message
  if [[ $COMMIT_MESSAGE =~ $PULL_REQUEST_REGEX ]]; then
    echo ${BASH_REMATCH[1]} >> pull_request_numbers.txt
  else
    jq --arg message "$COMMIT_MESSAGE" '.commits[] | select(.messageHeadline == $message)' pull_request.json | jq -r '.oid' >> fails.txt
    # echo "No pull request found in commit message: $COMMIT_MESSAGE"
  fi
done

sort -u -o pull_request_numbers.txt pull_request_numbers.txt

cat pull_request_numbers.txt | while read -r LINE; do
  # Call the process script and pass the line as an argument
  label-pull-request "$LINE" "$LABEL_STRING"
done

sed -i -e "s#^#$COMMIT_URL#" fails.txt
sed -i -e "s#^#$PULL_URL#" pull_request_numbers.txt

echo "Failures:"
cat fails.txt
echo "---"

echo "Successes:"
cat pull_request_numbers.txt

# Remove temporary file
rm -f pull_request.json pull_request_numbers.txt fails.txt
